#include <iostream>
#include <string.h>
using namespace std;

void sortString(char *first, char *last);

int main(void)
{
    string s
    sortString(&s[0], &s[s.length() - 1]);
    cout << s << endl;
    return 0;
}

void sortString(char *first, char *last)
{
    if ((last - first) < 1)
        return;
    char *pivot = first;
    pivot += (last - first) / 2;
    sortString(first, pivot);
    sortString(pivot + 1, last);
    char *i = first;
    char *j = pivot + 1;
    string s = "";
    while (i <= pivot && j <= last){
        if (*i < *j){
            s += *i;
            ++i;
        }
        else {
            s += *j;
            ++j;
        }
    }
    while (i <= pivot && j >= last) {
        s += *i;
        i++;
    }
    while (i >= pivot && j <= last) {
        s += *j;
        j++;
    }
    i = first;
    for (int n = 0; i <= last; n++, i++) {
        *i = s[n];
    }
    return;
}
